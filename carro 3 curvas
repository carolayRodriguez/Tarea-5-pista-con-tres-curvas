import tkinter as tk
import math
import time

# --- PID Controller Class ---
class PIDController:
    def __init__(self, Kp, Ki, Kd):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.prev_error = 0.0
        self.integral = 0.0

    def compute(self, error, dt):
        if dt == 0:
            return 0
        self.integral += error * dt
        derivative = (error - self.prev_error) / dt
        self.prev_error = error
        return self.Kp * error + self.Ki * self.integral + self.Kd * derivative

# --- Line Follower Car Class ---
class LineFollowerCar:
    def __init__(self, canvas):
        self.canvas = canvas
        self.car_x = 150
        self.car_y = 550
        self.car_angle = -90
        self.speed = 1.5  # Velocidad reducida
        self.sensor_distance = 40
        self.sensor_offset = 25
        self.pid = PIDController(0.8, 0.01, 0.1)
        self.last_time = time.time()
        self.lost_counter = 0

        self.body = self.create_car_body()
        self.sensor_left = self.create_sensor('blue')
        self.sensor_right = self.create_sensor('green')
        self.update_car()

    def create_car_body(self):
        return self.canvas.create_rectangle(self.car_x - 15, self.car_y - 25,
                                            self.car_x + 15, self.car_y + 25,
                                            fill='red', outline='black')

    def create_sensor(self, fill_color):
        return self.canvas.create_oval(0, 0, 6, 6, fill=fill_color, outline='white')

    def get_sensor_positions(self):
        angle_rad = math.radians(self.car_angle)
        front_x = self.car_x + self.sensor_distance * math.cos(angle_rad)
        front_y = self.car_y + self.sensor_distance * math.sin(angle_rad)

        left_x = front_x + self.sensor_offset * math.cos(angle_rad - math.pi/2)
        left_y = front_y + self.sensor_offset * math.sin(angle_rad - math.pi/2)
        right_x = front_x + self.sensor_offset * math.cos(angle_rad + math.pi/2)
        right_y = front_y + self.sensor_offset * math.sin(angle_rad + math.pi/2)

        return (left_x, left_y), (right_x, right_y)

    def update_car(self):
        angle = math.radians(self.car_angle)
        dx = 15 * math.cos(angle)
        dy = 15 * math.sin(angle)

        x1, y1 = self.car_x - dy, self.car_y + dx
        x2, y2 = self.car_x + dy, self.car_y - dx
        self.canvas.coords(self.body, x1, y1, x2, y2)

        (lx, ly), (rx, ry) = self.get_sensor_positions()
        r = 5
        self.canvas.coords(self.sensor_left, lx - r, ly - r, lx + r, ly + r)
        self.canvas.coords(self.sensor_right, rx - r, ry - r, rx + r, ry + r)

    def check_sensor(self, x, y, radius, sensor_id, original_color):
        items = self.canvas.find_overlapping(x - radius, y - radius, x + radius, y + radius)
        detected = False
        for item in items:
            try:
                color = self.canvas.itemcget(item, 'fill')
                if color == 'yellow':
                    detected = True
                    break
            except tk.TclError:
                continue
        self.canvas.itemconfig(sensor_id, fill='red' if detected else original_color)
        return 1 if detected else 0

    def move(self):
        now = time.time()
        dt = now - self.last_time
        self.last_time = now

        (lx, ly), (rx, ry) = self.get_sensor_positions()
        l_on = self.check_sensor(lx, ly, 10, self.sensor_left, 'blue')
        r_on = self.check_sensor(rx, ry, 10, self.sensor_right, 'green')

        if l_on == 0 and r_on == 0:
            self.lost_counter += 1
            if self.lost_counter > 100:
                print("Línea perdida. Carro detenido.")
                return
        else:
            self.lost_counter = 0

        error = (r_on - l_on) * 10
        correction = self.pid.compute(error, dt)
        self.car_angle += correction
        self.car_x += self.speed * math.cos(math.radians(self.car_angle))
        self.car_y += self.speed * math.sin(math.radians(self.car_angle))

        self.update_car()

# --- Main ---
window = tk.Tk()
window.title("Seguidor de Línea - Velocidad Reducida")
canvas = tk.Canvas(window, width=800, height=600, bg='white')
canvas.pack()

# Fondo de pista
canvas.create_rectangle(50, 50, 750, 580, fill='#2C3E50', outline='')

# Pista amarilla
canvas.create_line(
    150, 550,
    150, 400,
    300, 400,
    300, 200,
    500, 200,
    500, 400,
    650, 400,
    650, 150,
    300, 150,
    250, 250,
    100, 250,
    150, 550,
    width=80, fill='yellow', smooth=True
)

# Crear carro
car = LineFollowerCar(canvas)

def game_loop():
    car.move()
    window.after(10, game_loop)

game_loop()
window.mainloop()
